## INERVIEW Q ##

1. What is CRONJOB exaplin with example ?
2. Differ CRONJOB vs POLLSCM ?
         --> CRONJOB : build job without checking the code is change or not
         --> POLLSCM : build the job  if the developer change code at particular time






Jenkins :
its a CI/CD tool.
Default workspace for Jenkins : /var/lib/jenkins/workspace/job-1

** To create CI/CD we need to have PIPELINE **

CI : Continuous Integration : continuous build + continous test
integration : adding : adding old code with new code.
** Befor CI we have time waste and every thing is manual work. **
** After CI  buiding and testing every thing is on single place i.e. automated and quickly. **

CD : Continous Delivery    : deployment manually to production environment 
CD : Continous Deployment  : deployment automated to production environment 

PIPELINE : step by step execution of particular process
         : Series of events interlinked wih each other 

CODE  -->  BUILD  -->  TEST  --> (Check Quality) -->  DEPLOY


** As a Devops Eng we are going to deploy project on all ENV **

                       ENV : (Server)
                            |
               ---------------------------- 
               |                           |
             PROD (LIVE ENV)            PRE-PROD/ NON-PROD
               |                            |
         1. PROD   : USER                 1. DEV    : DEVLOPERS
                                          2. QA     : TESTERS
                                          3. UAT    : CLIENT



JENKINS :  8080
         - its a free and open source tool
         - its platform indepedent
         - it is built on java-11
         - KOSHUKE KAWAGUCHUI invented jenkins in SUN MICRO SYSTEM 2004
         - inital name was hudson  --> paid version  --> Oracle bought --> free
         - it consist lot of plugins
         - port number for jenkins is 8080


                           SETUP 
                             |
                  -----------------------
                  |                      |
               manually               automation


SETUP :
yum : Yellowdog Updater Modified
Update : sudo yum update -y

STEP-1: INSTALLING GIT JAVA-1.8.0 MAVEN 
yum install git java-1.8.0-amazon-corretto maven -y

        // STEP-1: INSTALLING GIT JAVA-1.8.0 MAVEN 
        // yum install git java-1.8.0-openjdk maven -y

STEP-2: GETTING THE REPO (jenkins.io --> download -- > redhat)
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

STEP-3: DOWNLOAD JAVA11 AND JENKINS
sudo yum install java-17-amazon-corretto -y
yum install jenkins -y
update-alternatives --config java

        // STEP-3: DOWNLOAD JAVA11 AND JENKINS
        // amazon-linux-extras install java-openjdk11 -y
        // yum install jenkins -y
        // update-alternatives --config java


#STEP-4: RESTARTING JENKINS (when we download service it will on stopped state)
sudo systemctl start jenkins
sudo systemctl status jenkins

              update all
                  |
          install git maven
                  |
            git clone <link>
                  |
                  ls
                  |
           cd <folder_name>
                  |
            mvn clean package
                  |
            jenkins install
                  |
            jenkins start


List out all JAVA Versions :
update-alternatives --config java

switch java versions :
update-alternatives --config java

To start Jenkins :
sudo systemctl start jenkins
// systemctl start jenkins.service

To see status of Jenkins :
sudo systemctl status jenkins        
// systemctl status jenkins.service



copy public ip and paste on browser like this
public-ip:8080
cat /var/lib/jenkins/secrets/initialAdminPassword
install plugins and create user for login.

INTEGRATION OF GIT AND MAVEN WITH JENKINS:
NEW ITEM -- > NAME: NETFLIX JOB -- > FREE STYLE -- > OK 
Source Code Management -- > GIT -- > https://github.com/devopsbyraham/jenkins-java-project.git
Build Steps -- > add setp -- > Execute shell -- > save

-----------------------------------------------------------
-- 15 --

Process for Automation :

                  copy script from github (jenkins.sh)
                                 |
                  make file in server (vim jenkins.sh)
                                 |
                  paste script on jenkins.sh file  --> save
                                 |
                  run command --> sh jenkins.sh
                  
------------------------------------------------------------

** NOTE: Without passing a parameter we cano build a job **

PARAMETERS : used to pass input for the jobs

1. choice : pass single inputs
2. string : to pass multiple inputs (rarely used)
3. multi line : to pass multiple input on multiple lines
4. bool : true or false
5. file : to build files

1. choice : when we have multiple options we can select one  (mostly used)
create a CI job --> Configure --> This project is parameterized --> choice --> name: env choice : dev,test,uat,prod --> Save 

** For Testing ENV we used 8090 port no. **
** ANd for Production ENV we used 8080 port no. **

PORT CHANGING : 
vim /usr/lib/systemd/system/jenkins.service
line number 67 (8080 = 8090)
systemctl daemon-reload
systemctl restart jenkins.service
systemctl status jenkins.service 

PASSWORDLESS LOGIN :
vim /var/lib/Jenkins/config.xml    (config.xml = jenkins configuration file)
line number 7 (true = false)
systemctl restart jenkins.service

 ** Jenkins can only run by deafulty 2 items concurrently at a single time **
CHANGING BULD LIMITS :
dashboard --> manage jenkins --> nodes --> built-in nodes --> configure --> number of exectors - 3 --> save 


NOTE :
when we stop and start server your ip will change and the services inside server also stop

** Elastic Ip is never going to change, once you give the ip address it si stick thier but it is paid one **

TROUBLESHOOTING TECHNIQUES :

1. JENKINS SERVER CRASHED :
stop server --> start server --> restart service 

2. JENKINS IS NOT GETTING ON 8080 :
change port number --> vim /usr/lib/systemd/system/jenkins.service --> line 67 (change port no) --> reload daemon --> reload jenkins

3. If job(project) will Delete
Dashboard --> Manage Jenkins --> Plugins --> available plugins --> (Search) Job Configuration Histoy --> install --> go back to top page 
now try to delete job --> Job Config History --> show deleted jobs  --> restore it

----------------------------------------------------------------------------------------------------------
-- 16 --

CRONJOB : used to schedule the works on jenkins.
cron syntax is used to work with cron jobs
cron syntax (5star)  : * * * * *
each star will have space in between
NOTE : use server timezone (UTC)

*         : minutes
*         : hours
*         : date
*         : month
*         : day (0=Sun, 1Mmon, 2=Tue, 3=Wed, 4=Thur, 5=Fri, 6=Sat)

** To generate this cron there is website cron tab = https://crontab-generator.org/  **

for e.g
i want to build item at 8.15 on 25-12-2024
1.          8.15  25-12-2024
         
           15 8 25 12 3(Wed)   

2.         2.30  26-12-2024

          30 2 26 12 4(Thur)

** Server will never follow indian timeline , it follow UTC timeline **

CREATE A CI JOB : Build Trigger --> Build periodically --> * * * * * --> save

LIMITATIONS  :
will not check the code is changed or not.

---------------------------------------------------------
POLLSCM : it will build when code is changes only.
Note : need to set the time limit.

CREATE A CI JOB : Build Trigger --> Poll Scm --> * * * * * --> save

LIMITATIONS : 
for e.g - devolper want build at 9am and after developer changes code at 7am so developer should wait for 2 hr to build
: time waste
to overcome this we have concept that is Webhooks.
---------------------------------------------------------
WEBHOOKS : it will trigger the build the moment we commit the code. 
         : the moment you commit the source code the build is trigger automatically 

github --> repo --> setting --> webhooks --> add webhook --> Payload url : http://16.16.64.193:8090/github-webhook/ --> Content type : application/json --> Add webhook 
                                                                                          |
                                                                                 Jenkins url/github-webhook

Jenkins Dashboard --> create a CI job --> Build triggers --> Github hook trigger for GITScm polling -->save

---------------------------------------------------------
THROTTLE BUILD : to restrict number of builds per interval (interval can be minutes, hours anythings)

create a normal job --> Throttle builds --> Number of Build : 3 --> time period : hours --> save
make builds and test

---------------------------------------------------------
REMOTE TRIGGERING :
CREATE JOB --> Build triggers --> Triggwe builds remotely --> Authentication Token : prasad --> save
copy the url and change values and buld it

---------------------------------------------------------
