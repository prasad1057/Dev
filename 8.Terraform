02-08-2023

INFRASTRUCTURE:
resources used to run our application on cloud.
ex: ec2, s3, elb, vpc --------------

in genral we used to deploy infra on manual 

Manual:
1. time consume
2. manual work
3. commiting mistakes

Automate -- > Terraform -- > code -- > hcl (Hashicorp configuration languge)


its a tool used to make infrastructure automation.
its a free and opensource.
its platform independent.   - u can install it on any OS
it comes on year 2014.
who developed : mitchel hasimoto 
own by: hasicorp 
terraform is written on go language.
We can call terraform as IAAC TOOL.  

HOW IT WORKS:
terraform uses code to automate the infra.
we use HCL : HashiCorp Configuration Language.

IAAC: Infrastructure as a code.

Code --- > execute --- > Infra 

ADVANTGAES:
1. Reuseable  - u can resue the terraform file
2. Time saving
3. Automation  - without manual work the code is repeatdly working  
4. Avoiding mistakes
5. Dry run  - without executing the code we can see output

------------
** Each cloud platform having their automate infra builder **
1. AWS = CFT ( Cloud Formamtion Template )
2. AZURE = ARM ( Azure Resource Management )
3. GOOGLE = GDE ( Google Deploy Engine )  

---------------------------------
iam user - adminaccess - create access key and secret key (security crendiatls - create acess key - CLI - next - dowload file) - in ec2 = aws configure - give acess and secret key - give region=us-east-1 - output=table


INSTALLING TERRAFORM:

sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform
aws configure


mkdir terraform
cd terraform
---------------------------------

TERRAFORM COMMANDS:
terraform init	: initalize the provider plugins on backend
terraform plan	: to create execution plan for our resource (it reads the value from configuration file and it isoing to show whcih value is applicable for which resource ) 
terrafrom apply : to create resources
terrafrom destroy : to delete resources

CODE:
vim main.tf 

provider "aws" {                      # provider means whcih cloud actually
region = "us-east-1"
}

resource "aws_instance" "one" {
ami = "ami-0bb4c991fa89d4b9b"
instance_type = "t2.micro"
}

terraform init
terraform plan
terraform apply
terraform destroy 

STATE FILE: used to store the resource information which is created by terraform 
to track the resource activities
in real time entire resource info is on state file.
we need to keep it safe
if we lost this file we cant track the infra.
Command:
terraform state list

terrafrom target: used to destroy the specific resource 
terraform state list
single target: terraform destroy -target="aws_instance.one[3]"
multi targets: terraform destroy -target="aws_instance.one[3]" -target="aws_instance.one[2]"

---------------------------------------------------------------------------------------------------------------------------------------------
VARIABLES: to pass values as variables

vim main.tf

provider "aws" {
}

resource "aws_instance" "one" {
count = var.instance_count
ami = "ami-0fa7190e664488b99"
instance_type = var.instance_type
tags = {
Name = "terra-server"
}
}  

------
vim variable.tf

variable "instance_type" {
description = "*"
type = string
default = "t2.micro"
}

variable "instance_count" {
description = "*"
type = number
default = 5
}

terraform apply --auto-approve
terraform destroy --auto-approve

------------------------------
