## INTERVIEW Q ##

1. What is Virtualization?
      --> Process of using hardware properties in proper / better way
2.  What is Containerization?
      -->  process of packing application with its dependencies

3. Differ b/w Docker stop v/s Docker kill ?
            --> Docker stop = First Docker is going to stop all services inside conatiner it will wait servies to stop 
            --> Docker kill = it doesn't care about service inside conatiner , directly attack
4. Diifer Docker pull v/s Docker run ?
            --> Docker pull = used to get the image 
            --> Docker run = to run the container

5. What is apt ?
            --> apt : ADVANCE PACKAGER TOOL (tool which is used to install packages for ubuntu)
6. What is Docker File ?
            --> its a way of creating images automatically & used multiple times & in Docker file D is always capital and also components 

5. Diifer RUN v/s CMD ?
            --> RUN : executes commands during image creation
            --> CMD : executes commands during conatiner creation
-------------------------------------------------------------------------------------------------------------------------------

Docker

MONOLITHIC       : SINGLE APP -- > SINGLE SERVER -- > SINGLE DATABASE
MICRO SERVICES   : SINGLE APP -- > MULTIPLE SERVERS -- > MULTIPLE DATABASES
e.g. Paytm Application 
-------------------------------------
MONOLITHIC       : If your application is small & has limited users then MONOLITHIC is good
- all service will be on single place
- dB is single

LIMITATIONS OF MONLITHIC:
1. SERVER PERFOMANCE  (When a server got affected by only one service inside whatever the service having enitre we are going to stop it)
2. DATABASE ISSUE 
-------------------------------------
MICRO SERVICES   : If your application is large & has more users then MICRO SERVICES  is good
- each and every serice will be on individual server
- individual server having individual dB

If you used MICRO SERVICE:
COST WILL BE HIGH
MAINTAINANCE
---------------------------------------------------------------------


      ------------------------     ------------------------     ------------------------     ------------------------
      |       ON-PREM        |     |    VIRTUALIZATION    |     |        CLOUD         |     |       CONTAINERS     |
      |----------------------|     |----------------------|     |----------------------|     |----------------------|
      |                      |     |   2cpu        2cpu   |     |                      |     |                      |
      |                      |     |   2RAM        2RAM   |     |                      |     |                      |
      |                      |     |                      |     |                      |     |                      |
      |     APPLICATION      | --> |   2cpu        2cpu   | --> |  10 * 100 = 1000     | --> |                      |
      |                      |     |   2RAM        2RAM   |     |  24 * 1000 = 24K     |     |                      |
      |                      |     |                      |     |                      |     |                      |
      |                      |     |                      |     |                      |     |                      |
      |                      |     |        8 CPUs        |     |                      |     |                      |
      |                      |     |        8 RAM         |     |                      |     |                      |
      ------------------------     ------------------------     ------------------------     ------------------------
        1.Maintenance                  1. Not Scalable              1. Cost is High             1. Light Weighted
        2. Hardware Issues             2. Fixed H/w                                             2. Easy to manage
        3. App Hosting Problem


-------------------------------------
SERVER = CONTAINER

- Containers will not have os by default.
- cant able to install pacakages
- cant able to deploy the app.

images: inside the image of docker we have os and packages

image (os) -- > conatiner (app)

VIRTUALIZATION: process of utilizing hardware resources in better.
CONTAINERIZATION: process of packing application with its dependencies
APP: PUBG DEPENDENCY: MAPS

PUBG:
APP: PLAYSTORE, MAPS: INTERNET
---------------------------------------------------------------------

DOCKER:
- its a free and open-source platform.
- docker will create containers.
- we can create, run, and deploy our apps on containers.
- its platform independent (native runs on Linux Distribution).
- containers will use host resources (cpu, mem, ram, os)
- docker will perform os level of VIRTUALIZATION called containerization.
- containers are light weighted 

History of Docker:
- year: 2013
- developed by: Solomen Hykes and Sebastian Phal
- language: go lang    (Google Official Language is GO LANGAUGE)


ARCHITECTURE:
DOCKER CLIENT: its a way of interacting with docker  (if give command -- > output)
DOCKER DAEMON: it manage all the docker components (images, cont, volumes, nlw)
DOCKER HOST: where we installed docker
DOCKER REGISTRY: it manages all the  docker images on internet.
      
** DOCKER COMPONENTS consume the H/w Resources of Host **

                     e.g  --> (Trip - Money - from Mom - if not - from Dad - then to you)
                          You                        Mom                          Dad
                  ---------------------      ---------------------      ---------------------           
                  |   DOCKER CLIENT   |      |    DOCKER_HOST    |      |  DOCKER REGISTRY  |
                  |-------------------|      |-------------------|      |-------------------|                 
                  |                   |      |   Docker Daemon   | ---->|                   |
                  |   docker build    | ---->|                   | ---->|          Oracle   |
                  |   docker pull     | ---->|  Containers       |      |                   |
                  |   docker run      | ---->|           Images  |<---- |         Cassandra |
                  |                   |      |                   |<---- |                   |
                  |                   |<---- |                   |      |                   |
                  |                   |      |                   |      |                   |
                  ---------------------      ---------------------      ---------------------

** after building Docker file you will get image **

-------------------------------------

image      : A Docker image is a blueprint for creating containers (An image is read-only, meaning it cannot be modified directly)

container  : A container is a working copy of the image.
           : A Docker container is a running instance of an image

e.g.
- Imagine you have a recipe book (the image). You can't write in it; it's read-only.
- When you want to cook, you make a photocopy of the recipe (the container).
- You can write notes or modify the photocopy (the writable layer), but the original recipe book (the image) stays unchanged.

-------------------------------------
INSTALLATION:
yum install docker -y
systemctl start docker
systemctl status docker

docker search                                : to search the docker images from daemon 
docker pull amazonlinux	                     : to downlaod image
du -sh                                       : server occupy storage for OS
docker run -it --name cont1 amazonlinux      : to create conatiner
ctrl p q                                     : to exit from conatiner


                  docker run -it --name cont1 amazonlinux : to create conatiner
                              |
                        interactive terminal : for to go inside the conatiner 

// Download inside container
yum install git -y      
yum install maven -y
touch file1

docker images		: to list images
docker start cont1	: to start cont1
docker stop cont1	      : to stop cont1      (It will take time to stop)
docker kill cont1	      : to stop immedieatly cont1
docker ps 		      : to see running containers
docker ps -a		: to see all containers

service docker start       : to start docker
service docker status      : to show status of dokcer

-------------------------------------------------------------------------------------------------------------------------------
-- 27 --
-------------------------------------------------------------------------------------------------------------------------------
OS LEVEL VIRTUALIZATION : what is inside OS completely create a backup of it.


NOTE: 
apt is package manager for ubuntu (yum in not supported for ubuntu)
Redhat: Yum
Ubuntu: Apt

apt : advance packager tool

docker pull ubuntu                      : to get ubuntu image
docker run -it --name cont1 ubuntu      : to create ubuntu
apt update -y                           : to update all
docker attach cont1                     : to go inside container
docker commit cont1 karan               : copy obejct from container to image (karan is image)  (docker commit only works to save a container obejct into image.)

without running apt update -y we cant install packages

            WORKING: (inside conatiner)      (This is Manual Process - is not going to used)
            docker pull ubuntu 
                  | 
            docker run -it --name cont1 ubuntu
                  |
            apt update -y
                  |
            apt install git maven apache2 tree -y
                  |
            touch file{1..5}
                  |
            docker commit cont1 karan
            docker run -it --name cont2 karan



Whatever objects in the conatiner is directly copied to the image


                           container-1                                      container-2
                        --------------------        karan image         ---------------------
        image           |                  |      ----------------      |                   |
   ---------------      |      git         |      |              |      |      git          |
   |             |      |      maven       |      |     git      |      |      maven        |
   |             | ---> |      apache2     | ---> |     maven    | ---> |      apache2      |
   |   ubuntu    | ---> |      tree        | ---> |     apache2  | ---> |      tree         |
   |             |      |      files       |      |     tree     |      |      files        |
   ---------------      |                  |      |     files    |      |                   |
                        |                  |      ----------------      |                   |
                        --------------------                            ---------------------    
                                                                       
                                                                        
----------------------------------------------------------------------------------------------------------------

DOCKERFILE:
- its a way of creating images automatically.
- we can reuse the docker file for multiple times.
- in Dockerfile D will be Capital always.
- Components inside the Dockerfile also Capital.

Dockerfile -- > Image -- > Container -- > DockerFile --> Image --> Container --> Reapeat

docker inspect cont7       : to give end to end information about container 
docker inspect cont7 | grep -i author

--------------------------------
COMPONENTS:
FROM		      : to base image (gives os) (get the OS)
RUN		      : to execute linux commands (image creation)
CMD		      : to execute linux commands (container creation)
ENTRYPOINT	      : high priority than cmd
COPY 		      : to copy local files to conatainer
ADD 		      : to copy Intenet files to conatainer
WORKDIR		: to go desired folder      (after run conatiner you will go desired folder)
LABEL 		: to attach our tags/labels
ENV		      : variables which run inside conatiner (image)
ARGS		      : variables which run outside conatiner(containers)
VOLUME		: used to create volume for conatiner
EXPOSE		: used to give port number

--------------------------------



--------------------------------
EX: -1

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y

Build : docker build -t netflix:v1 .
cont: docker run -it --name cont3 netflix:v1

--------------------------------
EX-2:
FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
CMD apt install default-jre -y

Build : docker build -t netflix:v2 .
cont: docker run -it --name cont4 netflix:v2

--------------------------------
EX-3:

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
COPY index.html /tmp
ADD https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz /tmp

--------------------------------
EX-4:

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
COPY index.html /tmp
ADD https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz /tmp
WORKDIR /tmp
LABEL author karank

--------------------------------
EX-5:

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
COPY index.html /tmp
ADD https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz /tmp
WORKDIR /tmp
LABEL author karank
ENV name prasad 
ENV client swiggy

run commands inside container
echo $name
echo $client


--------------------------------
EX-6:

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
COPY index.html /tmp
ADD https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz /tmp
WORKDIR /tmp
LABEL author karank
ENV name prasad
ENV client swiggy
VOLUME ["/volume1"]
EXPOSE 8080

--------------------------------
COMMANDS:
docker ps -a                         : to list all conatiners 
docker ps -a -q		             : to list conatnier ids
docker stop $(docker ps -a -q)       : to stop all conatiners
docker rm $(docker ps -a -q)         : to delete all conatiners

docker images -q	                   : to print image ids
docker rmi -f $(docker images -q)    : to delete all images      
         |
       i = images

--------------------------------

if container is not starting or you can't go inside container :

docker build -t netflix:v1 .
docker run -it --name cont1 netflix:v1 /bin/bash      (then u r able to go inside conatiner without this u can't)

-------------------------------------------------------------------------------------------------------------------------------
-- 28 --
-------------------------------------------------------------------------------------------------------------------------------
-- Docker Volumes --

VOLUMES:
- in docker, we use volumes to store the data.
- volume is nothing but a folder inside a container.
- we can share a volume from one container to another.
- the volume contains the files which have data.
- we can attach the single volume to multiple containers.
- but at a time we can attach only one volume to one container.
- volumes are decoupled (loosely attached)
- if we delete the container volume will not be deleted.
- size = 8GB

--------------------------------
Pre-Dowload Docker :
create instance -> Network setting -> Advance setting -> option: User Data (Write following script)
Script :
#! bin/bash
sudo -i
yum install docker -y
systemctl start docker

--------------------------------
METHOD-1:
DOCKER FILE:

FROM ubuntu
VOLUME ["/volume1"]

docker build -t netflix:v1 .
docker run -it --name cont1 netflix:v1
cd volume1
touch file{1..10}
ctrl p q

docker run -it --name cont2 --volumes-from cont1 --privileged=true ubuntu  (taking volume from cont1 to cont2) (--privileged=true --> like give full access to cont2)
cd volume1
ll

--------------------------------

2. CLI:

docker run -it --name cont3 -v /volume2 ubuntu   (v for voulme)
cd volume2
touch java{1..10}
ctrl p q

docker run -it --name cont4 --volumes-from cont3 --privileged=true ubuntu
cd volume2
ll
ctrl p q

--------------------------------

3. VOLUME MOUNTING:

volume commands:
docker volume create volume3
docker volume ls
docker volume inspect volume3        (inspect : getting complete information)

cd /var/lib/docker/volumes/volume3/_data       (Mountpoint : where the volume content is store)
touch python{1..10}
ll
docker run -it --name cont5 --mount source=volume3,destination=/volume3 ubuntu

--------------------------------

4. MOVING FILES FROM LOCAL TO CONTAINER:

create a conatiner and attach a volume for it

touch raham{1..10}
docker inspect cont6
docker volume inspect volume4
cp * /var/lib/docker/volumes/volume4/_data

--------------------------------

5. HOST TO CONTAINER : 
touch raham{1..10}
cp * /home/ec2-user
docker run -it --name cont12 -v /home/ec2-user:/abcd ubuntu

--------------------------------

SYSTEM COMMANDS:
docker system df	      : show docker components resource utilization  (H/w resources)
docker system df -v	: show docker components resource utilization individually
docker system prune	: to remove unused docker components

--------------------------------

JENKINS SETUP:
docker run -it --name cont1 -p 8080:8080 jenkins/jenkins:lts

-------------------------------------------------------------------------------------------------------------------------------
-- 29 --
-------------------------------------------------------------------------------------------------------------------------------
-- Docker Compose --


micro-service pattern  :  each service design inside container
      
dettach mode (-d or -D) : container will run but you can come out of container by defaultly

81 : container port number (can changable)
80 : image port number (can't changeable - it is apache port no)

/var/www/html       : container’s Apache web directory 

** apachectl is used to control the Apache server. **

-D FOREGROUND : Apache server run in the foreground instead of background service , keeping the container alive and serving web pages.

/bin/      : Contains essential binaries for all users (e.g., ls, cat, cp).
/sbin/     : Contains system administration binaries (e.g., iptables, fdisk, apachectl).


-i       → Interactive mode (keeps STDIN open)
-t       → Allocates a pseudo-TTY (for terminal access)
-d       → Detached mode (runs the container in the background)


--------------------------------
PROCESS: 
CODE -- > BUILD (DOCKER FILE) -- > IMAGE -- > CONTAINER -- > APP

vim Dockerfile

FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y 
COPY index.html /var/www/html
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

create index.html

docker build -t movies:v1 .
docker run -itd --name movies -p 81:80 movies:v1
public-ip:81 

--------------------------------
2. CHANGE INDEX.HTML (MOVIES=TRAIN)

docker build -t train:v1 .
docker run -itd --name train -p 82:80 train:v1
public-ip:82

--------------------------------
3. CHANGE INDEX.HTML (TRAIN=DTH)

docker build -t dth:v1 .
docker run -itd --name dth -p 83:80 dth:v1
public-ip:83

--------------------------------
4. CHANGE INDEX.HTML (DTH=RECHARGE)

docker build -t recharge:v1 .
docker run -itd --name recharge -p 84:80 recharge:v1
public-ip:84


--------------------------------
DOCKER COMPOSE : 
     - its a tool used to launch multiple conatiners.
     - we can create multiple containers on single hosts.
     - all of the services informatiom we are going to write on a file.
     - here we use docker-compose/compose file.
     - it will be on yaml format.
     - we use key-value pair (dictionary) (.yml or .yaml)
     - used to manage multiple servivces / container with help of a file.
     - docker compose will work on single host


SETUP: (also you can create script file and run it)
      sudo curl -L "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            |
      ls /usr/local/bin/
            |
      sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            |
      sudo chmod +x /usr/local/bin/docker-compose
            |
      docker-compose version

--------------------------------
Note :
Whenever we download a package on file format we need to move that file to bin folder.

** docker-compose need to support docker engine version (docker engine = 20  -  docker version = 3.8) **

vim docker-compose.yml

version: '3.8'
services:
  movies:
    image: movies:v1
    ports:
      - "81:80"
  train:
    image: train:v1
    ports:
      - "82:80"
  dth:
    image: dth:v1
    ports:
      - "83:80"
  recharge:
    image: recharge:v1
    ports:
      - "84:80"


docker-compose up -d      : Whatever write inside in compose file you are going to run that services
               |
            run the services 

Note: remove all the conatiners

** services and conatiner both are same, inside container role you have service **
--------------------------------
Commands:
docker-compose              : get all possible commands for the compose file
docker-compose up -d	    : to run all services
docker-compose down	    : to remove all services
docker-compose stop	    : to stop all services
docker-compose kill	    : to kill all services
docker-compose rm	          : to remove all services which is on stopped state
docker-compose start	    : to start all services
docker-compose pause	    : to pause all services
docker-compose unpause	    : to unpause all services
docker-compose images	    : to get all images managed by compose file
docker-compose ps -a	    : to get all containers managed by compose file
docker-compose logs	    : to get all logs managed by compose file
docker-compose scale dth=10 : to create 10 containers of dth     (scale= increase the strength of container)
docker-compose top	    : to get all process managed by conatiners on compose file
docker-compose -h           : to see all commands of docker-compose 

--------------------------------
DEFAULT FILE CHANGE:
mv docker-compose.yml raham.yml
docker-compose stop
Supported filenames: docker-compose.yml, docker-compose.yaml, compose.yml, compose.yaml
docker-compose -f raham.yml stop

-------------------------------------------------------------------------------------------------------------------------------
-- 30 --
-------------------------------------------------------------------------------------------------------------------------------

DOCKER HUB:

Its a central platfrom used to store docker images.
image we create on host then we will push them to dockerhub.
Once image is availabel on dockerhub we can use in any server.
we use repos to store images.

                              REPOSITORY
                                  |
                   -------------------------------
                   |                             |
            public repo                      private repo


NOTE : if image is not uploaded on docker hub you cant not use for all servers you need to create image on each server


ACCOUNT : 
      create account (docker hub.com)
            |
      create repository (movies) - public - create
            |
      docker images
            |
      docker tag image:v1 username/reponame
            |
      docker login (uername and password)
            |
      docker push username/reponame


TO PUSH IMAGE ON DOCKER HUB :
build dcoker file (docker build -t movies:v1 .)
      |
image tag  (docker tag movies:v1 username/reponame)      (repo is automatically create on hub)
      |
push it (docker push username/reponame)

-------------------------------------------------------------------------

DOCKER SWARM:

High availability: deploying app on more than one server
means using the cluster.

- docker swarm is a container orchestration tool.
- it is used to manage multiple containers on multiple nodes.
- each node will have a copy of single container.
- here we have manager and worker nodes.
- manager node will create containers and send to worker nodes.
- worker nodes will take the container and manage them.
- manager node communicates with worker node by using TOKEN.

** Container-orchistresion : managing multiple containers on multiple servers **
--------------------------------
SETUP:
1. create 3 servers (1=manager 2=worker) (all traffic is must)
yum install docker -y
systemctl start docker 
systemctl status docker

2. set the hostnames:
hostnamectl set-hostname manager/worker-1/worker-2

3. generate and copy token:
manager node: docker swarm init
copy the token to all worker nodes
docker node ls

--------------------------------

SERVICES:
its a way of exposing the application in docker.
with services we can create multiple copies of same container.
with services we can distribute the containers to all servers.

docker service create --name movies --replicas=3 --publish 81:80 jayaprakashsairam05/movies:latest


--------------------------------

docker node ls                : to list all nodes
docker service ls             : to get all services 
docker service ps train		: to list containers for train 
docker service inspect train	: to get complete info of train service
docker service scale train=10	: to scale the services            (scale in = increasing the strength of conatiners)
docker service scale train=6	: to scale the services            (scale out = decreasing the strenght of conatiners)
docker service rollback train	: to go back to previous state
docker service rm train		: to delete the train services

--------------------------------
SELF HEALING: automatically recreates container itself.

CLUSTER LEVEL ACTIVITES:
docker swarm leave(worker node)	 : to down the woker node
docker node rm id (manager node)     : to remove the node permenanetly
docker swarm join-token manager      : to regenerate the token

* If you want to delete/remove running       node first need to make down that node *
** Note : When you down the worker node we need to copy the token one more time to rejoin the cluster. **

Note: to join the node on cluster use the previous token
we can delete running worker node directly
we need to stop and then delete it


-------------------------------------------------------------------------------------------------------------------------------
-- 31 --
-------------------------------------------------------------------------------------------------------------------------------
Project --> dockernewproject repository

create 3 servers -
manager - t2.medium (Jenkins setup and docker also)
worker1 - t2.micro
worker2 - t2.micro

yum install docker -y
systemctl start docker
systemctl status docker

Jenkins server (get code) -> create docker file -> build image -> push to dokcer hib -> write a compose file
 
Docker file : To create image by automation
Docker Compose : To create multiple containers on single server
Docker swarm : To create multiple containers on multiple server
Docker stack : Docker compose + Docker swarm

--------------------------------
1. CREATE 3 SERVERS AND INSTALL DOCKER ON ALL OF THEM & CREATE CLUSTER OF IT

yum install docker -y
systemctl start docker
systemctl status docker
docker swarm init  <get_token>      (token -> paste it on workers node)
docker node ls

--------------------------------
2. INSTALLING JENKINS (Manager node)

vim jenkins.sh  -> sh jenkins.sh  --> paste the below script

sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
amazon-linux-extras install java-openjdk11 -y 
yum install git maven jenkins -y
systemctl start jenkins.service
systemctl status jenkins.service

create pipeline_project -> write script -> cd /var/lib/jenkins/workspace/pipeline_project -> ll 

--------------------------------
3. CREATE CUSTOM IMAGES AND PUSH TO DOCKERHUB WITH TAGS

DOCKER FILE:
FROM ubuntu
RUN apt-get update -y
RUN apt-get install apache2 -y
COPY index.html /var/www/html/
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

--------------------------------
INDEX.HTML:


build with paramters :
para1 = img (movies,train,dth)
para2 = repo (username/repo1)


PIPELINE:

pipeline {
    agent any 
    
    stages {
        stage('checkout') {
            steps {
                git 'https://github.com/RAHAMSHAIK007/dockernewproject.git'
            }
        }
        stage('build') {
            steps {
                sh 'docker build -t $img .'
            }
        }
        stage('tag') {
            steps {
                sh 'docker tag $img $repo'
            }
        }
        stage('push') {
            steps {
                sh 'docker login -u  -p '
                sh 'docker push $repo'
            }
        }
    }
}


4. GIVE PERMISSIONS

chmod 777 /var/run/docker.sock
systemctl daemon-reload
systemctl restart docker.service

--------------------------------
5. WRITE COMPOSE FILE AND PUSH TO GITHUB

version: '3'
services:
  devops:
    image: rahamshaik/devopsreponit:latest
    ports:
      - "80:80"
    volumes:
      - "devopsvol"
    deploy:
      replicas: 3

  aws:
    image: rahamshaik/awsreponit:latest
    ports:
      - "81:80"
    volumes:
      - "awsvol"
    deploy:
      replicas: 3

  datascience:
    image: rahamshaik/datasciencereponit:latest
    ports:
      - "82:80"
    volumes:
      - "datasciencevol"
    deploy:
      replicas: 3

  azure:
    image: rahamshaik/azurereponit:latest
    ports:
      - "83:80"
    volumes:
      - "azurevol"
    deploy:
      replicas: 3


-------------------------------------------------------------------------------------------------------------------------------
-- 32 --  Docker Portainer_Network_Resource Management_JFrog
-------------------------------------------------------------------------------------------------------------------------------

portainer : its an application to monitor the container (GUI method)

** compose file deploy on swarm --> by using docker stack **

            docker stack deploy -c portainer-agent-stack.yml portainer
                                                                |
                                                            stack name


docker stack ls       : to see all stack

If you delete stack then everything is automatically deleted (Conatiners, services)      --> docker stack rm <stack_name>

NETWORKING : it used to connect devices

prune --> remove all unused networks
--------------------------------

PORTAINER: (GUI)
- it is a container organizer, designed to make tasks easier, whether they are clustered or not. 
- able to connect multiple clusters, access the containers, migrate stacks between clusters
- it is not a testing environment mainly used for production routines in large companies.
- Portainer consists of two elements, the Portainer Server and the Portainer Agent. 
- Both elements run as lightweight Docker containers on a Docker engine


SETUP:

* Must have swarm mode and all ports enable with docker engine *
curl -L https://downloads.portainer.io/ce2-16/portainer-agent-stack.yml -o portainer-agent-stack.yml
docker stack deploy -c portainer-agent-stack.yml portainer
docker stack ps portainer
docker ps
public-ip of swamr master:9000
username and password 
 
--------------------------------

DOCKER NETWORKING:
- Docker networks are used to make a communication between the
  multiple containers that are running on same or different docker hosts.

                                                            DOCKER NETWORKING
                                                                    |
                              -----------------------------------------------------------------------------
                              |                       |                         |                         |
                       BRIDGE NETWORK *           HOST NETWORK               NONE NETWORK              OVERLAY NETWORK *
                                                                                                    (opposite of BRIDGE)



BRIDGE NETWORK: It is a default network that container will communicate with each other within the same host.

HOST NETWORK: When you Want your container IP and ec2 instance IP same then you use host network

NONE NETWORK: When you don’t Want The container to get exposed to the world, we use none network. It will not provide any network to our container.

OVERLAY NETWORK: Used to communicate containers with each other across the multiple docker hosts.

--------------------------------
COMMANDS :

docker network create network_name                                : To create a network
docker network ls                                                 : To see the list
docker network rm network_name                                    : To delete a network
docker network inspect network_name                               : To inspect network 
docker network connect network_name container_id/name             : To connect a container to the network
apt install iputils-ping -y                                       : command to install ping checks      (ping = checking response)
docker network disconnect network_name container_name             : To disconnect from the container
docker network prune                                              : To prune

--------------------------------

RESOURCE MANAGEMENT:
continers are going to use host resources. (CPU, MEM and RAM)
we need to limit that resoure utilization.
by default containers are not having limts.

docker run -itd --name cont3 --cpus="0.5" --memory="500mb" ubuntu 
docker inspect cont3
docker stats
docker top cont3      : used to see what are process running inside container

--------------------------------

* Instead of JFrog indusry used S3 aws services to store data *


JFrog  --> Artifactort tool  (where we can store jar,war,ear files)      --> for JFrog you need to maintain two servers

vim jfrog.sh --> paste script --> save --> sh jfrog.sh

Script :
#! /bin/bash
sudo yum update -y
sudo yum install java-1.8* -y
sudo wget https://jfrog.bintray.com/artifactory/jfrog-artifactory-oss-6.9.6.zip
sudo yum install unzip -y
sudo unzip  jfrog-artifactory-oss-6.9.6.zip
sudo sh jfrog-artifactory-oss-6.9.6/bin/artifactory.sh start




-------------------------------------------------------------------------------------------------------------------------------
Docker OneShot
-------------------------------------------------------------------------------------------------------------------------------

dotcloud (born) --> publicly available on conference of Pycorn = 2013 --> Cloud Native computing foundation (CNCF) = 2017



























